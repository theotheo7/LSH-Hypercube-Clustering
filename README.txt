PROJECT 2023 - ASKISI 1 - LSH/HYPERCUBE/CLUSTERING

ΟΜΑΔΑ 32
ΘΕΟΔΩΡΟΣ ΘΕΟΧΑΡΗΣ - 1115201800054
ΚΙΚΙΔΗΣ ΔΗΜΗΤΡΙΟΣ - 1115201600258

GITHUB REPO: https://github.com/theotheo7/LSH-Hypercube-Clustering

ΓΕΝΙΚΑ

Το project υλοποιήθηκε σε C++17 και με την χρήση του github. Για την μεταγλώτισση
υπάρχει διαθέσιμο Makefile.

Για μεταγλώτισση όλων των εκτελέσιμων:
    make all

Για μεταγλώτισση και εκτέλεση του lsh με default τιμές:
    make lsh

Για μεταγλώτισση και εκτέλεση του hypercube με default τιμές:
    make cube

Για μεταγλώτισση και εκτέλεση του cluster με default τιμές και Classic μέθοδο:
    make cluster

Για εκτέλεση ανεξάρτητα από το makefile:
    ./build/<exec> ...<flags>


ΜΕΡΟΣ Α

image.cpp/hpp: Η αναπαράσταση των images που μας δίνονται. Περιέχει ενα id, ένα vector
που κρατά τις συντεταγμένες του καθώς και κάποια βοηθητικά flags για το clustering.

utils.cpp/hpp: Βοηθητικό αρχείο στο οποίο έχουν υλοποιηθεί μερικές βοηθητικές
συναρτήσεις όπως είναι το distance.

hash_table.cpp/hpp: Μία απλή υλοποίηση μας ενός HashTable, καθώς το set της C++
δεν έχει τις ιδιότητες που θέλαμε για τον LSH. Χρησιμοποιούμε το vector αντί για πίνακα,
γιατί δεν χρειάζεται να είναι γνωστό εξ'αρχής το μέγεθος του και προσφέρει O(1) προσπέλαση
στα στοιχεία. Αποθηκεύει ένα pair από το ID και έναν Pointer για να μην είναι dependent του
τύπου που θα δωθεί. ID είναι ένας unsigned int, ο οποίος από την hash function του HashTable
απλά έρχεται στο range του πίνακα με ένα mod TableSize. Έχει συναρτήσεις για να επιστρέψει
το ένα ολόκληρο bucket ή μόνο όσα έχουν ίδιο ID  το όρισμα από το συγκεκριμένο bucket.

hash_function.cpp/hpp: Η υλοποίηση του hash function το οποίο χρησιμοποιείται τόσο στο LSH
όσο και στο Hypercube. Με την βοήθεια random τιμών, δίνοντας του τις συντεταγμένες ενός image
μπορούμε να hashαρουμε επιτυχώς το image. Υλοποιεί επίσης ένα coinflip για το Hypercube.

parser.cpp/hpp: Μια βοηθητική κλάση η οποία διαβάζει τα input αρχεία και αρχικοποιεί τα δεδομένα
στην μορφή που τα θέλουμε.

lsh.cpp/hpp: Η κλάση LSH εκτός από τις τιμές που έδωσε ο χρήστης έχει το w που παίρνει
καρφωτή τιμή, ένα ανοιχτό ofstream για το output file για να
γράφουν τα queries, ένα σύνολο από L Hashtables μεγέθους
n/8 οπου το καθένα έχει HashFuncs, k τυχαία ints για τα r στον γραμμικό συνδυασμό
των h και έναν δείκτη στη λίστα με όλα τα στοιχεία. Στα queries, ελέγχεται πρώτα αν έχουμε
αρκετά Points ίδιο ID, αλλιώς ψάχνουμε σε ολόκληρο το bucket.

cube.cpp/hpp: Η κλάση HyperCube έχει εκτός από τις τιμές που έδωσε ο χρήστης, ένα HashTable με
2^k buckets, ένα σύνολο από k h συναρτήσεις, όπου κάθε μία έχει ένα map για να αντιστοιχίζει
τυχαία 0 ή 1 με κάθε τιμή που επιστρέφει η h, έναν δείκτη από τη λίστα με όλα τα στοιχεία,
ένα ανοιχτό ofstream για το αρχείο output. Στην
insert, κάθε φορά αντιστοιχίζουμε την τιμή που επιστρέφει κάθε h με ένα 0 ή 1 και δημιουργούμε έτσι
ένα binary σε string, το οποίο μετατρέπουμε σε μη αρνητικό integer με ειδική συνάρτηση
για να φτιάξουμε ένα ID, το οποίο επειδή είναι μικρότερο από το μεγέθος του HashTable, ξέρουμε πως
θα μας πάει σε αυτό το bucket. H query για τον υπολογισμό των approximate nearest neighbors
βρίσκει τις κορυφές με αυξανόμενο hamming distance μέχρι να υπερβεί τα όρια που θέτει ο
χρήστης. Γι'αυτό έχουμε ειδική συνάρτηση στο utils που δέχεται ένα binary σε string και επιστρέφει
ένα vector από string binaries.

main_lsh.cpp/main_cube.cpp: Οι main συναρτήσεις με πανομοιότυπη λειτουργικότητα. Παίρνουν το
input από το command line και αν δεν δίνονται αρχεία εισόδου, εξόδου ή αναζήτησης τα ζητάει.
Αρχικοποιούν την αντιστοιχή δομή με τη βοήθεια του parser και στη συνέχεια πάλι με τον
parser εκτελούν την αναζήτηση. Μετά το πέρας της, ρωτάει τον χρήστη αν θέλει να συνεχίσει
με νέο σύνολο αναζήτης και νέο output file.


ΜΕΡΟΣ Β

cluster.cpp/hpp: Η κλάση που αναπαριστά ένα cluster. Έχει μέσα το id του cluster,
τις συντεταγμένες του centroid του, καθώς και ένα vector από δείκτες σε images που είναι
τα στοιχεία που του έχουν ανατεθεί. Περιέχει και κάποιες βοηθητικές συναρτήσεις για
το clustering.

clustering.cpp/hpp: Η κεντρική κλάση του clustering. Αρχικοποιείται με τις τιμές που διαβάζονται
από το cluster.conf και με ένα vector από clusters. Περιέχει μέσα τις υλοποιήσεις όλων των
απαραίτητων αλγορίθμων για το clustering (K-Means++, Lloyds, Reverse Search, Silhouette)
Για το kmeans επιλέγει αρχικά το πρώτο cluster τυχαία και τα υπόλοιπα με πιθανότητα ανάλογη
της απόστασης του κάθε image από το κοντινότερο centroid.
Το lloyd για κάθε image το αναθέτει στον κοντινότερο centroid και κατευθείαν κάνει update τα κέντρα
που επηρεάστηκαν με τον αλγόριθμο MacQueen.
Το reverse lsh και το reverse hypercube με την βοήθεια των κλάσεων από το Α μέρος
τρέχει για κάθε centroid ενα query με R που σε κάθε επανάληψη διπλασιάζεται. Αφού τρέξει
για όλα τα centroids και λυθούν όλα τα conflicts διπλασιάζεται η ακτίνα και επαναλαμβάνεται η διαδικασία
μέχρι να φτάσει ένα συγκεκριμένο threshold. Μετά κάνει assign όλα τα unassigned images στο
κοντινότερο centroid και υπολογίζει το silhouette, πριν γράψει τα αποτελεσματα στο output.

main_cluster.cpp: H main του Β μέρους. Αφού διαβάσει τα input/conf αρχεία αρχικοποιεί ένα
Clustering object. Έπειτα κάνει initialize τα centroid με το kpp και μετά εκτελεί όποιο από τα
Lloyd/ReverseLSH/ReverseCube έχει δώσει ο χρήστης. (default: Lloyd) Έπειτα υπολογίζει το silhouette
και τελειώνει κάνοντας output και απελευθερώνοντας όλη την μνήμη.